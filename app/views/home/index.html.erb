<!-- <img onclick="startDictation()" src="http://i.imgur.com/cHidSVu.gif" /> -->
<!-- <div id="transcript"></div> -->
<!-- <div id="textfield"></div> -->

<div class="main-container">
  <h2 class="title"> Photo Bot </h2>
  <h4> 2nd Edition Ver. 2.31 </h4>
  <canvas id="meter"></canvas>
  <div class="mic-container">
    <div class="soundwavesSVG1">
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 125" enable-background="new 0 0 100 100" xml:space="preserve"><g><path class="first-wave" d="M29.744,32.969l-6.098,6.1c6.027,6.03,6.027,15.835,0,21.863l0,0l6.098,6.101c0-0.001,0-0.001,0-0.001   C39.135,57.642,39.135,42.36,29.744,32.969z"/><path class="second-wave" d="M43.729,18.984l-6.102,6.1c13.738,13.737,13.738,36.095,0,49.832l0,0l6.102,6.1c0,0,0,0,0-0.001   C60.828,63.913,60.828,36.087,43.729,18.984z"/><path class="third-wave" d="M76.354,50c0-16.998-6.623-32.981-18.641-45l0,0l-6.104,6.1C62,21.492,67.723,35.304,67.723,50S62,78.508,51.609,88.899   V88.9l6.104,6.1c0-0.001,0-0.001,0-0.001C69.73,82.982,76.354,66.998,76.354,50z"/></g></svg>
    </div>
    <div class="active-mic recordButton" onclick="startDictation()"></div>
    <div class="soundwavesSVG2">
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 125" enable-background="new 0 0 100 100" xml:space="preserve"><g><path class="first-wave" d="M29.744,32.969l-6.098,6.1c6.027,6.03,6.027,15.835,0,21.863l0,0l6.098,6.101c0-0.001,0-0.001,0-0.001   C39.135,57.642,39.135,42.36,29.744,32.969z"/><path class="second-wave" d="M43.729,18.984l-6.102,6.1c13.738,13.737,13.738,36.095,0,49.832l0,0l6.102,6.1c0,0,0,0,0-0.001   C60.828,63.913,60.828,36.087,43.729,18.984z"/><path class="third-wave" d="M76.354,50c0-16.998-6.623-32.981-18.641-45l0,0l-6.104,6.1C62,21.492,67.723,35.304,67.723,50S62,78.508,51.609,88.899   V88.9l6.104,6.1c0-0.001,0-0.001,0-0.001C69.73,82.982,76.354,66.998,76.354,50z"/></g></svg>
    </div>
  </div>
</div>

<!-- HTML5 Speech Recognition API -->

<script>
  $(function() {
    responsiveVoice.speak("What type of Photo are you planning to take? Will it be indoors or outdoors? Will the subject be in motion or still?")
    // responsiveVoice.speak("Recording!")
  });

  var cat = "";
  var locale = "indoors";
  var motion = "still";

  function startDictation() {
    if (window.hasOwnProperty('webkitSpeechRecognition')) {

      var recognition = new webkitSpeechRecognition();

      recognition.continuous = false;
      recognition.interimResults = false;

      recognition.lang = "en-US";
      recognition.start();
      volumeLevel()
      recognition.onresult = function(e) {

        if (cat == "") {
          if (e.results[0][0].confidence > 0.75) {

            if (e.results[0][0].transcript.includes("portrait")) {
              console.log("your text included portrait");
              cat = "portrait";
            }
            if (e.results[0][0].transcript.includes("macro")) {
              console.log("your text included macro");
              cat = "macro";
            }
            if (e.results[0][0].transcript.includes("landscape")) {
              console.log("your text included landscape");
              cat = "landscape";
              locale = "outdoors";
            }
            if (e.results[0][0].transcript.includes("cityscape")) {
              console.log("your text included cityscape");
              cat = "cityscape";
              locale = "outdoors";
            }
            //"Outdoors" requires uppercase "O" to be read correctly
            if (e.results[0][0].transcript.includes("Outdoors")) {
              locale = "outdoors";
            }
            if (e.results[0][0].transcript.includes("motion")) {
              motion = "motion";
            }

          } else {
            responsiveVoice.speak("I did not catch that, please try again.");
            volumeLevelStop();
          }
        }
        if (cat != "") {
          var data = {
            category: cat,
            location: locale,
            movement: motion
          }
          if (cat == "landscape" || cat == "cityscape" || locale == "outdoors") {
            $.redirect("/maps?category=" + cat + "&movement=" + motion, data);
          } else {
            $.redirect("/nomaps?category=" + cat + "&movement=" + motion, data);
          }
        } else {
          responsiveVoice.speak("Please let me know if you want to take a Portrait, Macro, Landscape or Cityscape Photo.");
          volumeLevelStop();
        }
        // console.log(e.results[0][0].transcript);
        // console.log(typeof(e.results[0][0].transcript));
        // document.getElementById('transcript').innerHTML = e.results[0][0].transcript;
        // recognition.stop();
        // document.getElementById('textfield').innerHTML = e.results[0][0].confidence;
      };
      recognition.onerror = function(e) {
        recognition.stop();
        volumeLevelStop();
      };

    }
  }

var audioContext = null;
var meter = null;
var canvasContext = null;
var WIDTH=500;
var HEIGHT=50;
var rafID = null;
var meterData = {
  "waveNumber": ['.first-wave', '.second-wave', '.third-wave'],
  "range": [15, 45, 75]
}

function volumeLevel() {

    // grab our canvas
	canvasContext = document.getElementById( "meter" ).getContext("2d");

    // monkeypatch Web Audio
    window.AudioContext = window.AudioContext || window.webkitAudioContext;

    // grab an audio context
    audioContext = new AudioContext();

    // Attempt to get audio input
    try {
        // monkeypatch getUserMedia
        navigator.getUserMedia =
        	navigator.getUserMedia ||
        	navigator.webkitGetUserMedia ||
        	navigator.mozGetUserMedia;

        // ask for an audio input
        navigator.getUserMedia(
        {
            "audio": {
                "mandatory": {
                    "googEchoCancellation": "false",
                    "googAutoGainControl": "false",
                    "googNoiseSuppression": "false",
                    "googHighpassFilter": "false"
                },
                "optional": []
            },
        }, gotStream, didntGetStream);
    } catch (e) {
        alert('getUserMedia threw exception :' + e);
    }

}


function didntGetStream() {
    alert('Stream generation failed.');
}

var mediaStreamSource = null;

function gotStream(stream) {
    // Create an AudioNode from the stream.
    mediaStreamSource = audioContext.createMediaStreamSource(stream);

    // Create a new volume meter and connect it.
    meter = createAudioMeter(audioContext);
    mediaStreamSource.connect(meter);

    // kick off the visual updating
    drawLoop();
}

function drawLoop( time ) {
  for(i=0; i< meterData["waveNumber"].length; i++){
    if (meter.volume*400 > meterData["range"][i]){
      $(meterData["waveNumber"][i]).css({ fill: "black" });
        console.log(meter.volume)
    } else{
      $(meterData["waveNumber"][i]).css({ fill: "e6e6e6" });
    }
  }
    // set up the next visual callback
    rafID = window.requestAnimationFrame( drawLoop );
}

function volumeLevelStop(){
	meter.shutdown();
	// $( "#meter" ).hide( "slow");
}

</script>
